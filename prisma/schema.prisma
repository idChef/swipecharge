// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// NextAuth Models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  groups        UsersOnGroups[]
  expenses      Expense[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UsersOnGroups {
  id      String @id @default(cuid())
  userId  String
  groupId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Group {
  id         String          @id @default(cuid())
  name       String
  users      UsersOnGroups[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  inviteLink String          @unique
  Expense    Expense[]
}

// Expense model
model Expense {
  id     String @id @default(cuid())
  title  String
  amount Float

  // categoryId String
  userId    String
  createdAt DateTime @default(now())
  groupId   String

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
  // category Category? @relation(fields: [categoryId], references: [id])
}

// Category model (optional)
// model Category {
//   id        String    @id @default(cuid())
//   name      String
//   color     String
//   expenses  Expense[]
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }
